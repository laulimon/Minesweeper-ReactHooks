{"ast":null,"code":"import { InjectMineEnum } from '../constants/gameConstants'; //import { BoardActions } from '../actions/BoardActions';\n\nimport actionsName from \"../actions/actionsName\";\nimport { referenceToAdjacentCells, getSurroundingCellIndex } from '../utility/utility';\nexport function boardReducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case actionsName.CREATE_BLANK_BOARD:\n      return { ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        hiddenMines: state.level.totalMines,\n        board: setEmptyBoard(state.level)\n      };\n\n    case actionsName.CREATE_STARTED_GAME_BOARD:\n      return { ...state,\n        hiddenMines: payload.level.totalMines,\n        board: resetBoard(state.board, payload.level, payload.row, payload.column),\n        isStarted: true\n      };\n\n    case actionsName.UNCOVER_CELL:\n      return { ...state,\n        board: uncoverCell(state.board, payload.row, payload.column),\n        winner: didWin(uncoverCell(state.board, payload.row, payload.column))\n      };\n    // case actionsName.DOUBLE_CLICK_CELL:\n    //   return {\n    //     ...state,\n    //     board: uncoverAdjacentCells(state.board, payload.row, payload.column),\n    //     winner: didWin(uncoverAdjacentCells(state.board, payload.row, payload.column)),\n    //   };\n\n    case actionsName.RIGHT_CLICK_CELL:\n      return { ...state,\n        hiddenMines: hiddenMines(state.board, payload.row, payload.column, state.hiddenMines),\n        board: toggleFlagCell(state.board, payload.row, payload.column),\n        winner: didWin(toggleFlagCell(state.board, payload.row, payload.column))\n      };\n\n    case actionsName.CHANGE_LEVEL:\n      return { ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        level: payload.level,\n        hiddenMines: payload.level.totalMines,\n        board: setEmptyBoard(payload.level)\n      };\n\n    case actionsName.GAME_OVER:\n      return { ...state,\n        gameOver: true\n      };\n\n    default:\n      throw new Error('No matching action type in reducer');\n  }\n}\n\nfunction setEmptyBoard({\n  rows,\n  columns\n}) {\n  return Array.from(Array(rows), () => new Array(columns).fill({\n    hasMine: false,\n    isOpen: false,\n    countMinesAround: 0,\n    hasFlag: false\n  }));\n}\n\nfunction populateMines(emptyBoard, numMine, row, column) {\n  let numInjectedMines = 0;\n  let tempBoard = JSON.parse(JSON.stringify(emptyBoard));\n  let rowIndex = 0;\n  const indexAroundClickedCell = getSurroundingCellIndex(row, column).map(index => JSON.stringify(index));\n\n  while (numInjectedMines < numMine) {\n    for (let i = 0; i < emptyBoard[rowIndex].length; i++) {\n      if (rowIndex === row && i === column) {\n        continue;\n      }\n\n      if (indexAroundClickedCell.includes(JSON.stringify([rowIndex, i]))) {\n        continue;\n      }\n\n      if (numInjectedMines === numMine) {\n        break;\n      }\n\n      const shouldInjectMine = Math.floor(Math.random() * Math.floor(10));\n\n      if (shouldInjectMine === InjectMineEnum.INJECT && tempBoard[rowIndex][i].hasMine === false) {\n        tempBoard[rowIndex][i].hasMine = true;\n        numInjectedMines++;\n      }\n    }\n\n    if (rowIndex === emptyBoard.length - 1) {\n      rowIndex = 0;\n    } else {\n      rowIndex++;\n    }\n  }\n\n  return tempBoard;\n}\n\nfunction populateNumber(prevBoard) {\n  for (let i = 0; i < prevBoard.length; i++) {\n    for (let j = 0; j < prevBoard[i].length; j++) {\n      const adjacentCells = referenceToAdjacentCells(prevBoard, i, j);\n      let minesAround = 0;\n      adjacentCells.forEach(({\n        cell,\n        row,\n        column\n      }) => {\n        if (cell.hasMine) minesAround++;\n      });\n      prevBoard[i][j].countMinesAround = minesAround;\n    }\n  }\n\n  return prevBoard;\n}\n\n;\n\nfunction resetBoard(board, level, row, column) {\n  let boardWithMines = populateMines(board, level.totalMines, row, column);\n  return populateNumber(boardWithMines, row, column);\n}\n\nfunction hiddenMines(board, row, column, hiddenMines) {\n  return board[row][column].hasFlag ? hiddenMines + 1 : hiddenMines - 1;\n}\n\nfunction uncoverCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].isOpen = true;\n\n  if (newBoard[row][column].countMinesAround === 0 && !newBoard[row][column].hasMine) {\n    return uncoverAdjacentCells(newBoard, row, column);\n  }\n\n  return newBoard;\n}\n\nfunction toggleFlagCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].hasFlag = !newBoard[row][column].hasFlag;\n  return newBoard;\n}\n\nfunction uncoverAdjacentCells(originalBoard, row, column) {\n  const memo = {};\n  const stack = [{\n    cell: originalBoard[row][column],\n    row,\n    column\n  }];\n\n  while (stack.length > 0) {\n    const centerCell = stack.pop();\n    const surroundingCells = referenceToAdjacentCells(originalBoard, centerCell.row, centerCell.column);\n    const flagsInAdjacentCells = surroundingCells.reduce((acc, currCell) => {\n      if (currCell.cell.hasFlag) return acc + 1;\n      return acc;\n    }, 0);\n    if (flagsInAdjacentCells < centerCell.cell.countMinesAround) return originalBoard;\n\n    for (let cell of surroundingCells) {\n      if (memo[`${cell.row}-${cell.column}`]) continue;else {\n        memo[`${cell.row}-${cell.column}`] = true;\n      }\n      cell.cell.isOpen = cell.cell.hasFlag ? false : true;\n\n      if (cell.cell && !cell.cell.countMinesAround && !cell.cell.hasMine) {\n        stack.push(cell);\n      }\n    }\n  }\n\n  return originalBoard;\n}\n\n;\n\nfunction didWin(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (!board[i][j].hasMine && !board[i][j].isOpen) {\n        return false;\n      }\n\n      if (!board[i][j].hasMine && board[i][j].hasFlag) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/lauralimon/challengs/MINESWEEPIN/src/reducers/boardReducer.js"],"names":["InjectMineEnum","actionsName","referenceToAdjacentCells","getSurroundingCellIndex","boardReducer","state","type","payload","CREATE_BLANK_BOARD","gameOver","winner","isStarted","hiddenMines","level","totalMines","board","setEmptyBoard","CREATE_STARTED_GAME_BOARD","resetBoard","row","column","UNCOVER_CELL","uncoverCell","didWin","RIGHT_CLICK_CELL","toggleFlagCell","CHANGE_LEVEL","GAME_OVER","Error","rows","columns","Array","from","fill","hasMine","isOpen","countMinesAround","hasFlag","populateMines","emptyBoard","numMine","numInjectedMines","tempBoard","JSON","parse","stringify","rowIndex","indexAroundClickedCell","map","index","i","length","includes","shouldInjectMine","Math","floor","random","INJECT","populateNumber","prevBoard","j","adjacentCells","minesAround","forEach","cell","boardWithMines","originalBoard","newBoard","uncoverAdjacentCells","memo","stack","centerCell","pop","surroundingCells","flagsInAdjacentCells","reduce","acc","currCell","push"],"mappings":"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","sourcesContent":["import { InjectMineEnum } from '../constants/gameConstants';\n\n//import { BoardActions } from '../actions/BoardActions';\nimport actionsName from \"../actions/actionsName\"\nimport { referenceToAdjacentCells, getSurroundingCellIndex } from '../utility/utility';\n\nexport function boardReducer(state, { type, payload }) {\n  switch (type) {\n    case actionsName.CREATE_BLANK_BOARD:\n      return {\n        ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        hiddenMines: state.level.totalMines,\n        board: setEmptyBoard(state.level),\n      };\n\n    case actionsName.CREATE_STARTED_GAME_BOARD:\n      return {\n        ...state,\n        hiddenMines: payload.level.totalMines,\n        board: resetBoard(state.board, payload.level, payload.row, payload.column),\n        isStarted: true,\n      };\n\n    case actionsName.UNCOVER_CELL:\n      return {\n        ...state,\n        board: uncoverCell(state.board, payload.row, payload.column),\n        winner: didWin(uncoverCell(state.board, payload.row, payload.column)),\n      };\n\n    // case actionsName.DOUBLE_CLICK_CELL:\n    //   return {\n    //     ...state,\n    //     board: uncoverAdjacentCells(state.board, payload.row, payload.column),\n    //     winner: didWin(uncoverAdjacentCells(state.board, payload.row, payload.column)),\n    //   };\n\n    case actionsName.RIGHT_CLICK_CELL:\n      return {\n        ...state,\n        hiddenMines: hiddenMines(state.board, payload.row, payload.column, state.hiddenMines),\n        board: toggleFlagCell(state.board, payload.row, payload.column),\n        winner: didWin(toggleFlagCell(state.board, payload.row, payload.column)),\n      };\n\n    case actionsName.CHANGE_LEVEL:\n      return {\n        ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        level: payload.level,\n        hiddenMines: payload.level.totalMines,\n        board: setEmptyBoard(payload.level),\n      };\n\n    case actionsName.GAME_OVER:\n      return {\n        ...state,\n        gameOver: true,\n      };\n\n    default:\n      throw new Error('No matching action type in reducer');\n  }\n}\n\nfunction setEmptyBoard({ rows, columns }) {\n  return Array.from(\n    Array(rows), () =>\n    new Array(columns).fill({\n      hasMine: false,\n      isOpen: false,\n      countMinesAround: 0,\n      hasFlag: false,\n    })\n  );\n}\n\nfunction populateMines(emptyBoard, numMine, row, column) {\n  let numInjectedMines = 0;\n  let tempBoard = JSON.parse(JSON.stringify(emptyBoard));\n\n  let rowIndex = 0;\n\n  const indexAroundClickedCell = getSurroundingCellIndex(row, column).map(index => JSON.stringify(index));\n\n  while (numInjectedMines < numMine) {\n    for (let i = 0; i < emptyBoard[rowIndex].length; i++) {\n      if (rowIndex === row && i === column) {\n        continue;\n      }\n\n      if (indexAroundClickedCell.includes(JSON.stringify([rowIndex, i]))) {\n        continue;\n      }\n\n      if (numInjectedMines === numMine) {\n        break;\n      }\n\n      const shouldInjectMine = Math.floor(Math.random() * Math.floor(10));\n\n      if (shouldInjectMine === InjectMineEnum.INJECT &&\n        tempBoard[rowIndex][i].hasMine === false\n      ) {\n        tempBoard[rowIndex][i].hasMine = true;\n        numInjectedMines++;\n      }\n    }\n\n    if (rowIndex === emptyBoard.length - 1) {\n      rowIndex = 0;\n    } else {\n      rowIndex++;\n    }\n  }\n  return tempBoard;\n}\n\nfunction populateNumber(prevBoard) {\n  for (let i = 0; i < prevBoard.length; i++) {\n    for (let j = 0; j < prevBoard[i].length; j++) {\n      const adjacentCells = referenceToAdjacentCells(prevBoard, i, j);\n      let minesAround = 0;\n      adjacentCells.forEach(({ cell, row, column }) => {\n        if (cell.hasMine) minesAround++;\n      })\n\n      prevBoard[i][j].countMinesAround = minesAround;\n    }\n  }\n  return prevBoard;\n};\n\nfunction resetBoard(board, level, row, column) {\n  let boardWithMines = populateMines(board, level.totalMines, row, column);\n  return populateNumber(boardWithMines, row, column);\n}\n\nfunction hiddenMines(board, row, column, hiddenMines) {\n  return board[row][column].hasFlag ? hiddenMines + 1 : hiddenMines - 1\n}\n\nfunction uncoverCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].isOpen = true;\n  if (newBoard[row][column].countMinesAround === 0 && !newBoard[row][column].hasMine) {\n    return uncoverAdjacentCells(newBoard, row, column);\n  }\n  return newBoard;\n}\n\nfunction toggleFlagCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].hasFlag = !newBoard[row][column].hasFlag;\n  return newBoard\n}\n\nfunction uncoverAdjacentCells(originalBoard, row, column) {\n\n  const memo = {};\n  const stack = [{ cell: originalBoard[row][column], row, column }];\n\n  while (stack.length > 0) {\n    const centerCell = stack.pop();\n    const surroundingCells = referenceToAdjacentCells(originalBoard, centerCell.row, centerCell.column);\n\n    const flagsInAdjacentCells = surroundingCells.reduce((acc, currCell) => {\n      if (currCell.cell.hasFlag) return acc + 1;\n      return acc;\n    }, 0);\n\n    if (flagsInAdjacentCells < centerCell.cell.countMinesAround) return originalBoard;\n\n    for (let cell of surroundingCells) {\n      if (memo[`${cell.row}-${cell.column}`]) continue;\n      else {\n        memo[`${cell.row}-${cell.column}`] = true;\n      }\n\n      cell.cell.isOpen = cell.cell.hasFlag ? false : true;\n\n      if (cell.cell && !cell.cell.countMinesAround && !cell.cell.hasMine) {\n        stack.push(cell);\n      }\n    }\n  }\n\n  return originalBoard;\n};\n\nfunction didWin(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (!board[i][j].hasMine && !board[i][j].isOpen) {\n        return false;\n      }\n\n      if (!board[i][j].hasMine && board[i][j].hasFlag) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}