{"ast":null,"code":"export function getNeighborsPosition(positionX, positionY) {\n  //getSurroundingCellIndex\n  return [[positionX - 1, positionY - 1], [positionX - 1, positionY], [positionX - 1, positionY + 1], [positionX, positionY - 1], [positionX, positionY + 1], [positionX + 1, positionY - 1], [positionX + 1, positionY], [positionX + 1, positionY + 1]];\n}\nexport function referenceToAdjacentCells(originalBoard, row, column) {\n  const adjacentCells = [];\n  const surroundingCellIndex = getNeighborsPosition(row, column);\n  console.log(\"que mierda\", surroundingCellIndex);\n\n  for (let [newRow, newColumn] of surroundingCellIndex) {\n    if (isCell(originalBoard, newRow, newColumn)) {\n      adjacentCells.push({\n        cell: originalBoard[newRow][newColumn],\n        row: newRow,\n        column: newColumn\n      });\n    }\n  }\n\n  return adjacentCells;\n}\nexport function isCell(board, row, column) {\n  if (row >= 0 && row < board.length && column >= 0 && column < board[0].length) {\n    return true;\n  }\n\n  return false;\n}\nexport function doSomethingToAdjacentCells(board, row, column, func) {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  const surroundingCellIndex = getNeighborsPosition(row, column);\n\n  for (let [newRow, newColumn] of surroundingCellIndex) {\n    if (isCell(newBoard, newRow, newColumn)) func(newBoard[newRow][newColumn]);\n  }\n\n  return newBoard;\n}\n;","map":{"version":3,"sources":["/home/lauralimon/challengs/MINESWEEPIN/src/utility/utility.js"],"names":["getNeighborsPosition","positionX","positionY","referenceToAdjacentCells","originalBoard","row","column","adjacentCells","surroundingCellIndex","console","log","newRow","newColumn","isCell","push","cell","board","length","doSomethingToAdjacentCells","func","newBoard","JSON","parse","stringify"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,SAA9B,EAAyCC,SAAzC,EAAoD;AAAE;AAC3D,SAAO,CACL,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAS,GAAG,CAA5B,CADK,EAEL,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAhB,CAFK,EAGL,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAS,GAAG,CAA5B,CAHK,EAIL,CAACD,SAAD,EAAYC,SAAS,GAAG,CAAxB,CAJK,EAKL,CAACD,SAAD,EAAYC,SAAS,GAAG,CAAxB,CALK,EAML,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAS,GAAG,CAA5B,CANK,EAOL,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAhB,CAPK,EAQL,CAACD,SAAS,GAAG,CAAb,EAAgBC,SAAS,GAAG,CAA5B,CARK,CAAP;AAUD;AAED,OAAO,SAASC,wBAAT,CAAkCC,aAAlC,EAAiDC,GAAjD,EAAsDC,MAAtD,EAA8D;AACnE,QAAMC,aAAa,GAAG,EAAtB;AAEA,QAAMC,oBAAoB,GAAGR,oBAAoB,CAACK,GAAD,EAAMC,MAAN,CAAjD;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,oBAA1B;;AAEA,OAAK,IAAI,CAACG,MAAD,EAASC,SAAT,CAAT,IAAgCJ,oBAAhC,EAAsD;AAEpD,QAAIK,MAAM,CAACT,aAAD,EAAgBO,MAAhB,EAAwBC,SAAxB,CAAV,EAA8C;AAC5CL,MAAAA,aAAa,CAACO,IAAd,CAAmB;AACjBC,QAAAA,IAAI,EAAEX,aAAa,CAACO,MAAD,CAAb,CAAsBC,SAAtB,CADW;AAEjBP,QAAAA,GAAG,EAAEM,MAFY;AAGjBL,QAAAA,MAAM,EAAEM;AAHS,OAAnB;AAKD;AACF;;AAED,SAAOL,aAAP;AACD;AAWD,OAAO,SAASM,MAAT,CAAgBG,KAAhB,EAAuBX,GAAvB,EAA4BC,MAA5B,EAAoC;AACzC,MAAID,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGW,KAAK,CAACC,MAAxB,IAAkCX,MAAM,IAAI,CAA5C,IAAiDA,MAAM,GAAGU,KAAK,CAAC,CAAD,CAAL,CAASC,MAAvE,EAA+E;AAC7E,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;AAOD,OAAO,SAASC,0BAAT,CAAoCF,KAApC,EAA2CX,GAA3C,EAAgDC,MAAhD,EAAwDa,IAAxD,EAA8D;AACnE,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,KAAf,CAAX,CAAjB;AACA,QAAMR,oBAAoB,GAAGR,oBAAoB,CAACK,GAAD,EAAMC,MAAN,CAAjD;;AAEA,OAAK,IAAI,CAACK,MAAD,EAASC,SAAT,CAAT,IAAgCJ,oBAAhC,EAAsD;AACpD,QAAIK,MAAM,CAACO,QAAD,EAAWT,MAAX,EAAmBC,SAAnB,CAAV,EAAyCO,IAAI,CAACC,QAAQ,CAACT,MAAD,CAAR,CAAiBC,SAAjB,CAAD,CAAJ;AAC1C;;AAED,SAAOQ,QAAP;AACD;AAAA","sourcesContent":["export function getNeighborsPosition(positionX, positionY) { //getSurroundingCellIndex\n  return [\n    [positionX - 1, positionY - 1],\n    [positionX - 1, positionY],\n    [positionX - 1, positionY + 1],\n    [positionX, positionY - 1],\n    [positionX, positionY + 1],\n    [positionX + 1, positionY - 1],\n    [positionX + 1, positionY],\n    [positionX + 1, positionY + 1],\n  ];\n}\n\nexport function referenceToAdjacentCells(originalBoard, row, column) {\n  const adjacentCells = [];\n\n  const surroundingCellIndex = getNeighborsPosition(row, column);\n  console.log(\"que mierda\", surroundingCellIndex)\n\n  for (let [newRow, newColumn] of surroundingCellIndex) {\n\n    if (isCell(originalBoard, newRow, newColumn)) {\n      adjacentCells.push({\n        cell: originalBoard[newRow][newColumn],\n        row: newRow,\n        column: newColumn,\n      });\n    }\n  }\n\n  return adjacentCells;\n}\n\n\n\n\n\n\n\n\n\n\nexport function isCell(board, row, column) {\n  if (row >= 0 && row < board.length && column >= 0 && column < board[0].length) {\n    return true;\n  }\n  return false;\n}\n\n\n\n\n\n\nexport function doSomethingToAdjacentCells(board, row, column, func) {\n  const newBoard = JSON.parse(JSON.stringify(board));\n  const surroundingCellIndex = getNeighborsPosition(row, column);\n\n  for (let [newRow, newColumn] of surroundingCellIndex) {\n    if (isCell(newBoard, newRow, newColumn)) func(newBoard[newRow][newColumn]);\n  }\n\n  return newBoard;\n};\n\n"]},"metadata":{},"sourceType":"module"}