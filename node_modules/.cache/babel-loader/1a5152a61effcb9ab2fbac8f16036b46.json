{"ast":null,"code":"import { InjectMineEnum } from '../constants/gameConstants'; //import { BoardActions } from '../actions/BoardActions';\n\nimport actionsName from \"../actions/actionsName\";\nimport { referenceToAdjacentCells, getSurroundingCellIndex } from '../utility/utility';\nexport function boardReducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case actionsName.CREATE_BLANK_BOARD:\n      return { ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        hiddenMines: state.level.totalMines,\n        board: setBlankBoard(state.level)\n      };\n\n    case actionsName.CREATE_STARTED_GAME_BOARD:\n      return { ...state,\n        hiddenMines: payload.level.totalMines,\n        board: seedMinesAndNumbers(state.board, payload.level, payload.positionX, payload.positionY),\n        isStarted: true\n      };\n\n    case actionsName.UNCOVER_CELL:\n      return { ...state,\n        board: uncoverCell(state.board, payload.row, payload.column),\n        winner: didWin(uncoverCell(state.board, payload.row, payload.column))\n      };\n    // case actionsName.DOUBLE_CLICK_CELL:\n    //   return {\n    //     ...state,\n    //     board: uncoverAdjacentCells(state.board, payload.row, payload.column),\n    //     winner: didWin(uncoverAdjacentCells(state.board, payload.row, payload.column)),\n    //   };\n\n    case actionsName.RIGHT_CLICK_CELL:\n      return { ...state,\n        hiddenMines: hiddenMines(state.board, payload.row, payload.column, state.hiddenMines),\n        board: toggleFlagCell(state.board, payload.row, payload.column),\n        winner: didWin(toggleFlagCell(state.board, payload.row, payload.column))\n      };\n\n    case actionsName.CHANGE_LEVEL:\n      return { ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        level: payload.level,\n        hiddenMines: payload.level.totalMines,\n        board: setBlankBoard(payload.level)\n      };\n\n    case actionsName.GAME_OVER:\n      return { ...state,\n        gameOver: true\n      };\n\n    default:\n      throw new Error('No matching action type in reducer');\n  }\n}\n\nfunction setBlankBoard({\n  rows,\n  columns\n}) {\n  return Array.from(Array(rows), () => new Array(columns).fill({\n    hasMine: false,\n    isOpen: false,\n    countMinesAround: 0,\n    hasFlag: false\n  }));\n}\n\nfunction seedMinesAndNumbers(board, level, positionX, positionY) {\n  console.log(\"en x\", positionX, \"en y\", positionY);\n  let boardWithSeedMines = seedMine(board, level.totalMines, positionX, positionY);\n  return seedNumber(boardWithSeedMines, positionX, positionY);\n}\n\nfunction seedMine(blankBoard, numMineToSeed, row, column) {\n  let totalSeedMines = 0; //numInjectedMines\n\n  let tempBoard = JSON.parse(JSON.stringify(blankBoard));\n  let rowIndex = 0;\n  const indexAroundClickedCell = getSurroundingCellIndex(row, column).map(index => JSON.stringify(index));\n\n  while (totalSeedMines < numMineToSeed) {\n    for (let i = 0; i < blankBoard[rowIndex].length; i++) {\n      // console.log(\"blankBoard[rowIndex]\", blankBoard[rowIndex])\n      if (totalSeedMines === numMineToSeed) break;\n\n      if (rowIndex === row && i === column) {\n        continue;\n      }\n\n      if (indexAroundClickedCell.includes(JSON.stringify([rowIndex, i]))) {\n        continue;\n      }\n\n      const luckyNumber = Math.floor(Math.random() * Math.floor(10)); // Tip: the mine would be seed only when the lucky number is 1\n      // console.log(\"numero\", luckyNumber)\n\n      if (luckyNumber === 1 && tempBoard[rowIndex][i].hasMine === false) {\n        tempBoard[rowIndex][i].hasMine = true;\n        totalSeedMines++;\n      }\n    }\n\n    if (rowIndex === blankBoard.length - 1) {\n      rowIndex = 0;\n    } else {\n      rowIndex++;\n    }\n  }\n\n  return tempBoard;\n}\n\nfunction seedNumber(prevBoard) {\n  for (let i = 0; i < prevBoard.length; i++) {\n    for (let j = 0; j < prevBoard[i].length; j++) {\n      const adjacentCells = referenceToAdjacentCells(prevBoard, i, j);\n      let minesAround = 0;\n      adjacentCells.forEach(({\n        cell,\n        row,\n        column\n      }) => {\n        if (cell.hasMine) minesAround++;\n      });\n      prevBoard[i][j].countMinesAround = minesAround;\n    }\n  }\n\n  return prevBoard;\n}\n\n;\n\nfunction hiddenMines(board, row, column, hiddenMines) {\n  return board[row][column].hasFlag ? hiddenMines + 1 : hiddenMines - 1;\n}\n\nfunction uncoverCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].isOpen = true;\n\n  if (newBoard[row][column].countMinesAround === 0 && !newBoard[row][column].hasMine) {\n    return uncoverAdjacentCells(newBoard, row, column);\n  }\n\n  return newBoard;\n}\n\nfunction toggleFlagCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].hasFlag = !newBoard[row][column].hasFlag;\n  return newBoard;\n}\n\nfunction uncoverAdjacentCells(originalBoard, row, column) {\n  const memo = {};\n  const stack = [{\n    cell: originalBoard[row][column],\n    row,\n    column\n  }];\n\n  while (stack.length > 0) {\n    const centerCell = stack.pop();\n    const surroundingCells = referenceToAdjacentCells(originalBoard, centerCell.row, centerCell.column);\n    const flagsInAdjacentCells = surroundingCells.reduce((acc, currCell) => {\n      if (currCell.cell.hasFlag) return acc + 1;\n      return acc;\n    }, 0);\n    if (flagsInAdjacentCells < centerCell.cell.countMinesAround) return originalBoard;\n\n    for (let cell of surroundingCells) {\n      if (memo[`${cell.row}-${cell.column}`]) continue;else {\n        memo[`${cell.row}-${cell.column}`] = true;\n      }\n      cell.cell.isOpen = cell.cell.hasFlag ? false : true;\n\n      if (cell.cell && !cell.cell.countMinesAround && !cell.cell.hasMine) {\n        stack.push(cell);\n      }\n    }\n  }\n\n  return originalBoard;\n}\n\n;\n\nfunction didWin(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (!board[i][j].hasMine && !board[i][j].isOpen) {\n        return false;\n      }\n\n      if (!board[i][j].hasMine && board[i][j].hasFlag) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/lauralimon/challengs/MINESWEEPIN/src/reducers/boardReducer.js"],"names":["InjectMineEnum","actionsName","referenceToAdjacentCells","getSurroundingCellIndex","boardReducer","state","type","payload","CREATE_BLANK_BOARD","gameOver","winner","isStarted","hiddenMines","level","totalMines","board","setBlankBoard","CREATE_STARTED_GAME_BOARD","seedMinesAndNumbers","positionX","positionY","UNCOVER_CELL","uncoverCell","row","column","didWin","RIGHT_CLICK_CELL","toggleFlagCell","CHANGE_LEVEL","GAME_OVER","Error","rows","columns","Array","from","fill","hasMine","isOpen","countMinesAround","hasFlag","console","log","boardWithSeedMines","seedMine","seedNumber","blankBoard","numMineToSeed","totalSeedMines","tempBoard","JSON","parse","stringify","rowIndex","indexAroundClickedCell","map","index","i","length","includes","luckyNumber","Math","floor","random","prevBoard","j","adjacentCells","minesAround","forEach","cell","originalBoard","newBoard","uncoverAdjacentCells","memo","stack","centerCell","pop","surroundingCells","flagsInAdjacentCells","reduce","acc","currCell","push"],"mappings":"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","sourcesContent":["import { InjectMineEnum } from '../constants/gameConstants';\n//import { BoardActions } from '../actions/BoardActions';\nimport actionsName from \"../actions/actionsName\"\nimport { referenceToAdjacentCells, getSurroundingCellIndex } from '../utility/utility';\n\nexport function boardReducer(state, { type, payload }) {\n  switch (type) {\n    case actionsName.CREATE_BLANK_BOARD:\n      return {\n        ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        hiddenMines: state.level.totalMines,\n        board: setBlankBoard(state.level),\n      };\n\n    case actionsName.CREATE_STARTED_GAME_BOARD:\n      return {\n        ...state,\n        hiddenMines: payload.level.totalMines,\n        board: seedMinesAndNumbers(state.board, payload.level, payload.positionX, payload.positionY),\n        isStarted: true,\n      };\n\n    case actionsName.UNCOVER_CELL:\n      return {\n        ...state,\n        board: uncoverCell(state.board, payload.row, payload.column),\n        winner: didWin(uncoverCell(state.board, payload.row, payload.column)),\n      };\n\n    // case actionsName.DOUBLE_CLICK_CELL:\n    //   return {\n    //     ...state,\n    //     board: uncoverAdjacentCells(state.board, payload.row, payload.column),\n    //     winner: didWin(uncoverAdjacentCells(state.board, payload.row, payload.column)),\n    //   };\n\n    case actionsName.RIGHT_CLICK_CELL:\n      return {\n        ...state,\n        hiddenMines: hiddenMines(state.board, payload.row, payload.column, state.hiddenMines),\n        board: toggleFlagCell(state.board, payload.row, payload.column),\n        winner: didWin(toggleFlagCell(state.board, payload.row, payload.column)),\n      };\n\n    case actionsName.CHANGE_LEVEL:\n      return {\n        ...state,\n        gameOver: false,\n        winner: false,\n        isStarted: false,\n        level: payload.level,\n        hiddenMines: payload.level.totalMines,\n        board: setBlankBoard(payload.level),\n      };\n\n    case actionsName.GAME_OVER:\n      return {\n        ...state,\n        gameOver: true,\n      };\n\n    default:\n      throw new Error('No matching action type in reducer');\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction setBlankBoard({ rows, columns }) {\n  return Array.from(\n    Array(rows), () =>\n    new Array(columns).fill({\n      hasMine: false,\n      isOpen: false,\n      countMinesAround: 0,\n      hasFlag: false,\n    })\n  );\n}\n\nfunction seedMinesAndNumbers(board, level, positionX, positionY) {\n  console.log(\"en x\", positionX, \"en y\", positionY)\n  let boardWithSeedMines = seedMine(board, level.totalMines, positionX, positionY);\n  return seedNumber(boardWithSeedMines, positionX, positionY);\n}\n\nfunction seedMine(blankBoard, numMineToSeed, row, column) {\n  let totalSeedMines = 0; //numInjectedMines\n  let tempBoard = JSON.parse(JSON.stringify(blankBoard));\n\n  let rowIndex = 0;\n\n  const indexAroundClickedCell = getSurroundingCellIndex(row, column).map(index => JSON.stringify(index));\n\n  while (totalSeedMines < numMineToSeed) {\n    for (let i = 0; i < blankBoard[rowIndex].length; i++) {\n      // console.log(\"blankBoard[rowIndex]\", blankBoard[rowIndex])\n      if (totalSeedMines === numMineToSeed) break;\n\n\n      if (rowIndex === row && i === column) {\n        continue;\n      }\n\n      if (indexAroundClickedCell.includes(JSON.stringify([rowIndex, i]))) {\n        continue;\n      }\n\n      const luckyNumber = Math.floor(Math.random() * Math.floor(10));\n      // Tip: the mine would be seed only when the lucky number is 1\n      // console.log(\"numero\", luckyNumber)\n\n      if (luckyNumber === 1 && tempBoard[rowIndex][i].hasMine === false) {\n        tempBoard[rowIndex][i].hasMine = true;\n        totalSeedMines++;\n      }\n    }\n\n    if (rowIndex === blankBoard.length - 1) {\n      rowIndex = 0;\n    } else {\n      rowIndex++;\n    }\n  }\n  return tempBoard;\n}\n\nfunction seedNumber(prevBoard) {\n  for (let i = 0; i < prevBoard.length; i++) {\n    for (let j = 0; j < prevBoard[i].length; j++) {\n      const adjacentCells = referenceToAdjacentCells(prevBoard, i, j);\n      let minesAround = 0;\n      adjacentCells.forEach(({ cell, row, column }) => {\n        if (cell.hasMine) minesAround++;\n      })\n\n      prevBoard[i][j].countMinesAround = minesAround;\n    }\n  }\n  return prevBoard;\n};\n\n\n\nfunction hiddenMines(board, row, column, hiddenMines) {\n  return board[row][column].hasFlag ? hiddenMines + 1 : hiddenMines - 1\n}\n\nfunction uncoverCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].isOpen = true;\n  if (newBoard[row][column].countMinesAround === 0 && !newBoard[row][column].hasMine) {\n    return uncoverAdjacentCells(newBoard, row, column);\n  }\n  return newBoard;\n}\n\nfunction toggleFlagCell(originalBoard, row, column) {\n  const newBoard = JSON.parse(JSON.stringify(originalBoard));\n  newBoard[row][column].hasFlag = !newBoard[row][column].hasFlag;\n  return newBoard\n}\n\nfunction uncoverAdjacentCells(originalBoard, row, column) {\n\n  const memo = {};\n  const stack = [{ cell: originalBoard[row][column], row, column }];\n\n  while (stack.length > 0) {\n    const centerCell = stack.pop();\n    const surroundingCells = referenceToAdjacentCells(originalBoard, centerCell.row, centerCell.column);\n\n    const flagsInAdjacentCells = surroundingCells.reduce((acc, currCell) => {\n      if (currCell.cell.hasFlag) return acc + 1;\n      return acc;\n    }, 0);\n\n    if (flagsInAdjacentCells < centerCell.cell.countMinesAround) return originalBoard;\n\n    for (let cell of surroundingCells) {\n      if (memo[`${cell.row}-${cell.column}`]) continue;\n      else {\n        memo[`${cell.row}-${cell.column}`] = true;\n      }\n\n      cell.cell.isOpen = cell.cell.hasFlag ? false : true;\n\n      if (cell.cell && !cell.cell.countMinesAround && !cell.cell.hasMine) {\n        stack.push(cell);\n      }\n    }\n  }\n\n  return originalBoard;\n};\n\nfunction didWin(board) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (!board[i][j].hasMine && !board[i][j].isOpen) {\n        return false;\n      }\n\n      if (!board[i][j].hasMine && board[i][j].hasFlag) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}