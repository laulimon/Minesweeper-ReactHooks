{"ast":null,"code":"var _jsxFileName = \"/home/lauralimon/challengs/Con Hooks/src/components/Cell.jsx\";\nimport React, { useContext, useEffect } from 'react';\nimport { BoardActions } from '../actions/BoardActions';\nimport { dispatchContext, stateContext } from '../Game';\nimport './Cell.scss';\nexport function Cell(props) {\n  const dispatch = useContext(dispatchContext);\n  const {\n    gameOver,\n    level,\n    clickNumber\n  } = useContext(stateContext);\n  let {\n    hasMine,\n    isUncovered,\n    numMinesAround,\n    row,\n    column,\n    flagged\n  } = props.cellInfo;\n  useEffect(() => {\n    if (isUncovered && hasMine) dispatch({\n      type: BoardActions.GAME_OVER\n    });\n  }, [isUncovered, dispatch, hasMine]);\n\n  function onCellClick() {\n    if (flagged || gameOver) return;\n\n    if (clickNumber === 0) {\n      dispatch({\n        type: BoardActions.INITIATE_BOARD,\n        payload: {\n          level,\n          row,\n          column\n        }\n      });\n    }\n\n    dispatch({\n      type: BoardActions.UNCOVER_CELL,\n      payload: {\n        row,\n        column\n      }\n    });\n  }\n\n  function onCellDoubleClick() {\n    if (gameOver) return;\n    dispatch({\n      type: BoardActions.DOUBLE_CLICK_CELL,\n      payload: {\n        row,\n        column\n      }\n    });\n  }\n\n  function onCellRightClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (gameOver || isUncovered) return;\n    dispatch({\n      type: BoardActions.RIGHT_CLICK_CELL,\n      payload: {\n        row,\n        column\n      }\n    });\n    return false;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `cell ${isUncovered ? 'uncovered' : ''} ${flagged ? 'noHover' : ''}`,\n    onClick: onCellClick,\n    onDoubleClick: onCellDoubleClick,\n    onContextMenu: e => onCellRightClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `\n          cell_content _${numMinesAround} \n          ${hasMine && isUncovered || hasMine && gameOver ? 'mine' : ''} \n          ${flagged ? 'flagged' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, numMinesAround && !hasMine && isUncovered ? numMinesAround : ''));\n}","map":{"version":3,"sources":["/home/lauralimon/challengs/Con Hooks/src/components/Cell.jsx"],"names":["React","useContext","useEffect","BoardActions","dispatchContext","stateContext","Cell","props","dispatch","gameOver","level","clickNumber","hasMine","isUncovered","numMinesAround","row","column","flagged","cellInfo","type","GAME_OVER","onCellClick","INITIATE_BOARD","payload","UNCOVER_CELL","onCellDoubleClick","DOUBLE_CLICK_CELL","onCellRightClick","e","preventDefault","stopPropagation","RIGHT_CLICK_CELL"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport { BoardActions } from '../actions/BoardActions';\nimport { dispatchContext, stateContext } from '../Game';\n\nimport './Cell.scss';\n\nexport function Cell(props) {\n  const dispatch = useContext(dispatchContext);\n  const { gameOver, level, clickNumber } = useContext(stateContext);\n  let { hasMine, isUncovered, numMinesAround, row, column, flagged } = props.cellInfo;\n  \n  useEffect(() => {\n    if(isUncovered && hasMine) dispatch({ type: BoardActions.GAME_OVER });\n  }, [isUncovered, dispatch, hasMine])\n\n  function onCellClick() {\n    if (flagged || gameOver) return;\n    if (clickNumber === 0) {\n      dispatch({ type: BoardActions.INITIATE_BOARD, payload: { level, row, column } });\n    }\n    dispatch({ type: BoardActions.UNCOVER_CELL, payload: { row, column } });\n  }\n\n  function onCellDoubleClick() {\n    if (gameOver) return;\n    dispatch({ type: BoardActions.DOUBLE_CLICK_CELL, payload: { row, column }})\n  }\n\n  function onCellRightClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (gameOver || isUncovered) return;\n    dispatch({ type: BoardActions.RIGHT_CLICK_CELL, payload: { row, column }});\n    return false;\n  }\n\n  return(\n    <div \n      className={`cell ${isUncovered ? 'uncovered' : ''} ${flagged ? 'noHover': ''}`}\n      onClick={onCellClick}\n      onDoubleClick={onCellDoubleClick}\n      onContextMenu={(e) => onCellRightClick(e)}\n    >\n      <div\n        className={`\n          cell_content _${numMinesAround} \n          ${(hasMine && isUncovered) || (hasMine && gameOver) ? 'mine' : ''} \n          ${flagged ? 'flagged' : ''}`}\n      >\n      {(numMinesAround && !hasMine && isUncovered) ? numMinesAround : ''}\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}