{"ast":null,"code":"var _jsxFileName = \"/home/lauralimon/challengs/MINESWEEPIN/src/components/Board.jsx\";\nimport React, { useEffect, useContext } from 'react';\nimport './Board.scss';\nimport { Cell } from './Cell';\nimport { stateContext, dispatchContext } from '../Game';\nimport { BoardActions } from '../actions/BoardActions';\nimport { GameLevel } from '../constants/gameConstants';\nexport function Board() {\n  const state = useContext(stateContext);\n  const dispatch = useContext(dispatchContext);\n  useEffect(() => {\n    dispatch({\n      type: BoardActions.INITIATE_DUMMY_BOARD,\n      payload: {\n        level: GameLevel.INTERMEDIATE\n      }\n    });\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    style: {\n      gridTemplateRows: `repeat(${state.level.rows}, 22px)`,\n      gridTemplateColumns: `repeat(${state.level.columns}, 22px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, state.gameOver ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gameOver\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, \"GAME OVER\") : '', state.board.map((row, i) => row.map((cell, j) => /*#__PURE__*/React.createElement(Cell, {\n    cellInfo: { ...cell,\n      row: i,\n      column: j\n    },\n    key: [i, j],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 32\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/lauralimon/challengs/MINESWEEPIN/src/components/Board.jsx"],"names":["React","useEffect","useContext","Cell","stateContext","dispatchContext","BoardActions","GameLevel","Board","state","dispatch","type","INITIATE_DUMMY_BOARD","payload","level","INTERMEDIATE","gridTemplateRows","rows","gridTemplateColumns","columns","gameOver","board","map","row","i","cell","j","column"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAO,cAAP;AAEA,SAASC,IAAT,QAAqB,QAArB;AAEA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,SAA9C;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,SAASC,SAAT,QAA0B,4BAA1B;AAEA,OAAO,SAASC,KAAT,GAAiB;AACtB,QAAMC,KAAK,GAAGP,UAAU,CAACE,YAAD,CAAxB;AACA,QAAMM,QAAQ,GAAGR,UAAU,CAACG,eAAD,CAA3B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,YAAY,CAACM,oBAArB;AAA2CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAEP,SAAS,CAACQ;AAAnB;AAApD,KAAD,CAAR;AACD,GAFQ,EAEN,CAACL,QAAD,CAFM,CAAT;AAIA,sBACE;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,KAAK,EACH;AACEM,MAAAA,gBAAgB,EAAG,UAASP,KAAK,CAACK,KAAN,CAAYG,IAAK,SAD/C;AAEEC,MAAAA,mBAAmB,EAAG,UAAST,KAAK,CAACK,KAAN,CAAYK,OAAQ;AAFrD,KAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASIV,KAAK,CAACW,QAAN,gBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,GAGa,EAZjB,EAeIX,KAAK,CAACY,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,CAAN,KACdD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,CAAP,kBAAa,oBAAC,IAAD;AACnB,IAAA,QAAQ,EACN,EACE,GAAGD,IADL;AAEEF,MAAAA,GAAG,EAAEC,CAFP;AAGEG,MAAAA,MAAM,EAAED;AAHV,KAFiB;AAQnB,IAAA,GAAG,EAAE,CAACF,CAAD,EAAIE,CAAJ,CARc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB,CADF,CAfJ,CADF;AA6BD","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport './Board.scss';\n\nimport { Cell } from './Cell';\n\nimport { stateContext, dispatchContext } from '../Game';\nimport { BoardActions } from '../actions/BoardActions';\n\nimport { GameLevel } from '../constants/gameConstants';\n\nexport function Board() {\n  const state = useContext(stateContext);\n  const dispatch = useContext(dispatchContext);\n\n  useEffect(() => {\n    dispatch({ type: BoardActions.INITIATE_DUMMY_BOARD, payload: { level: GameLevel.INTERMEDIATE } });\n  }, [dispatch])\n\n  return (\n    <div\n      className=\"board\"\n      style={\n        {\n          gridTemplateRows: `repeat(${state.level.rows}, 22px)`,\n          gridTemplateColumns: `repeat(${state.level.columns}, 22px)`,\n        }\n      }>\n      {\n        state.gameOver ?\n          <div className=\"gameOver\">\n            GAME OVER\n            </div> : ''\n      }\n      {\n        state.board.map((row, i) =>\n          row.map((cell, j) => <Cell\n            cellInfo={\n              {\n                ...cell,\n                row: i,\n                column: j\n              }\n            }\n            key={[i, j]} />)\n        )\n      }\n    </div>);\n}"]},"metadata":{},"sourceType":"module"}